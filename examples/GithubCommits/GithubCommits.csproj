<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="ZipFolder" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <FolderToCompress ParameterType="System.String" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs"><![CDATA[        
            const int BufferSize = 64 * 1024;

            var buffer = new byte[BufferSize];
            var fileMode = OverwriteExistingFile ? FileMode.Create : FileMode.CreateNew;

            Action<string, ZipArchive> addPathToZip = null;
            addPathToZip = new Action<string, ZipArchive>((string path, ZipArchive zip) =>
            {
                 if ((File.GetAttributes(path) & FileAttributes.Directory) == FileAttributes.Directory)
                 {
                     foreach (string p in Directory.GetFileSystemEntries(path))
                     {
                         addPathToZip(p, zip);
                     }
                 }
                 else // It's not a directory
                 {
                     var archivePath = path.Substring(FolderToCompress.TrimEnd('\\', '/').Count() + 1);
                     var archiveEntry = zip.CreateEntry(archivePath);
                     using (var fs = new FileStream(path, FileMode.Open))
                     using (var zipStream = archiveEntry.Open())
                     {
                         int bytesRead = -1;
                         while ((bytesRead = fs.Read(buffer, 0, BufferSize)) > 0)
                         {
                             zipStream.Write(buffer, 0, bytesRead);
                         }
                     }
                 };
             });

            using (var outputFileStream = new FileStream(OutputFileName, fileMode))
            using (var archive = new ZipArchive(outputFileStream, ZipArchiveMode.Create))
            {
                addPathToZip(FolderToCompress, archive);
            }    
      ]]></Code>
    </Task>
  </UsingTask>
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{C17FB73D-DF55-4C83-A4D7-A6FFCB59D7E6}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>GithubCommits</RootNamespace>
    <AssemblyName>GithubCommits</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <AppSkeletonPath>$(OutputPath)\app\</AppSkeletonPath>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Octokit">
      <HintPath>..\packages\Octokit.0.4.1\lib\net45\Octokit.dll</HintPath>
    </Reference>
    <Reference Include="Splunk.Client">
      <HintPath>..\packages\Splunk.Client.2.0.0\lib\portable-net45+win+wpa81\Splunk.Client.dll</HintPath>
    </Reference>
    <Reference Include="Splunk.ModularInputs">
      <HintPath>..\packages\Splunk.ModularInputs.2.0.0\lib\net45\Splunk.ModularInputs.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="GithubCommits.cs" />
    <None Include="GithubCommits\**\*.*" />
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target> -->
  <Target Name="AfterBuild">
    <!-- At this point, we have a directory AppSkeleton in the project directory that
         contains app.conf and inputs.conf.spec. -->
    <MakeDir Directories="$(AppSkeletonPath);$(AppSkeletonPath)\GithubCommits" />
    <MakeDir Directories="$(AppSkeletonPath)\GithubCommits\bin;$(AppSkeletonPath)\GithubCommits\default;$(AppSkeletonPath)\GithubCommits\README" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)\GithubCommits\default\app.conf" DestinationFolder="$(AppSkeletonPath)\GithubCommits\default" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)\GithubCommits\README\inputs.conf.spec" DestinationFolder="$(AppSkeletonPath)\GithubCommits\README" />
    <Copy SourceFiles="$(OutputPath)\GithubCommits.exe" DestinationFolder="$(AppSkeletonPath)\GithubCommits\bin" />
    <ItemGroup>
      <DLLsToInclude Include="$(OutputPath)\*.dll" />
    </ItemGroup>
    <Copy SourceFiles="@(DLLsToInclude)" DestinationFolder="$(AppSkeletonPath)\GithubCommits\bin" />
    <ZipFolder FolderToCompress="$(AppSkeletonPath)" OutputFileName="$(OutputPath)\GithubCommits.spl" OverwriteExistingFile="true" />
    <Message Importance="high" Text="Finished building .spl file in $(OutputPath)GithubCommits.spl" />
  </Target>
</Project>